#!/usr/bin/env bash
set -euo pipefail

# This is just a thin wrapper around prune_builds. That way we still get the
# preflight checks to make sure the workdir looks sane.

dn=$(dirname "$0")
# shellcheck source=src/cmdlib.sh
. "${dn}"/cmdlib.sh

print_help() {
    cat 1>&2 <<'EOF'
Usage: coreos-assembler prune --help
       coreos-assembler prune [--keep=N] [--keep-last-days=N]

  Delete older untagged build artifacts. By default, only the last 3 untagged
  builds are kept.  This can be overridden with the `--keep` option.
EOF
}

# Parse options
KEEP_LAST_N=
KEEP_LAST_DAYS=
rc=0
options=$(getopt --options h --longoptions help,keep:,keep-last-days: -- "$@") || rc=$?
[ $rc -eq 0 ] || {
    print_help
    exit 1
}
eval set -- "$options"
while true; do
    case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        --keep)
            shift
            KEEP_LAST_N="$1"
            ;;
        --keep-last-days)
            shift
            KEEP_LAST_DAYS="$1"
            ;;
        --)
            shift
            break
            ;;
        *)
            fatal "$0: unrecognized option: $1"
            exit 1
            ;;
    esac
    shift
done

if [ $# -ne 0 ]; then
    print_help
    fatal "ERROR: Too many arguments"
    exit 1
fi

# just support one of the two for now
if [ -n "${KEEP_LAST_N:-}" ] && [ -n "${KEEP_LAST_DAYS:-}" ]; then
    fatal "ERROR: Only one of --keep or --keep-last-days allowed"
elif [ -z "${KEEP_LAST_N:-}" ] && [ -z "${KEEP_LAST_DAYS:-}" ]; then
    KEEP_LAST_N=3
fi

if [ -n "${KEEP_LAST_DAYS:-}" ]; then
    set -- --keep-last-days "${KEEP_LAST_DAYS}"
else
    set -- --keep-last-n "${KEEP_LAST_N}"
fi

prepare_build

"${dn}"/prune_builds --workdir "${workdir:?}" "$@"
